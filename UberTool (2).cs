using System; using System.Collections.Generic; using System.Collections; using System.Linq; using System.Globalization; using System.Text; using Oxide.Core; using Oxide.Core.Plugins; using Oxide.Core.Libraries.Covalence; using UnityEngine; using Network; using Facepunch; using System.Text.RegularExpressions; using ProtoBuf; using Oxide.Game.Rust.Cui; using static System.Math; using Newtonsoft.Json; using BTN = BUTTON; using Oxide.Game.Rust; using Oxide.Game.Rust.Libraries.Covalence;  namespace Oxide.Plugins { [Info("UberTool", "FuJiCuRa", "1.4.0", ResourceId = 78)] class UberTool : RustPlugin { [PluginReference] Plugin Clans;  StrdDt plyrPrfs = new StrdDt(); class StrdDt { public Dictionary<ulong, Plyrnf> PlyData = new Dictionary<ulong, Plyrnf>(); public StrdDt(){} } class Plyrnf { public float SF; public int DBG; public Plyrnf(){} }  public class EPlanner : MonoBehaviour { BasePlayer player; InputState stt; uint ctvtm; Construction.Target target; Construction.Target mvTrgt; BaseEntity mvTrgtSnp; Construction construction; Construction mvCnstrctn; Construction ryDfntn; Vector3 rttnOffst; Vector3 mvOffst; string lstCrsshr; string lstWrnng;  Planner plnnr; bool sPlnnr; bool sHmmr; bool isWireTool; HeldEntity hldItm; bool sRmvr; bool isAnotherHeld; Item ctvtmLnk; bool sTpDplybl; int dfltGrd; uint lstPrfb; bool initialized;  bool ctvTrgt; bool sPlcng; float tkDist; RaycastHit rayHit; BaseEntity rayEntity; IPlayer rayEntityOwner; string rayEntityName; Vector3 lastAimAngles; Socket_Base lastSocketBase; Vector3 lastSocketPos; BaseEntity lastSocketEntity; Construction.Placement lastPlacement; Ray lastRay; bool plannerInfoStatus; bool removerInfoStatus; bool hammerInfoStatus; bool lastSocketForce;  int cuiFontSize = 14; string cuiFontColor = "1 1 1 1"; string fontType = r("EbobgbPbaqrafrq-Erthyne.ggs"); float lastPosRotUpdate = 0f;  void Awake() { player = GetComponent<BasePlayer>(); stt = player.serverInput; UnEqp(); dfltGrd = uTs.plyrPrfs.PlyData[player.userID].DBG; lstPrfb = 72949757u; ctvtm = 0; construction = new Construction(); ryDfntn = new Construction(); construction.canBypassBuildingPermission = true; lastAimAngles = player.lastReceivedTick.inputState.aimAngles; lastSocketBase = default(Socket_Base); lastSocketPos = Vector3.zero; lastSocketEntity = default(BaseEntity); lastPlacement = default(Construction.Placement); rayEntity = default(BaseEntity); rttnOffst = Vector3.zero; mvOffst = Vector3.zero; }  void Start() { if (uTs.hideTips) player.SendConsoleCommand(r("tnzrgvc.uvqrtnzrgvc")); initialized = true; }  void UnEqp() { foreach (var item in player.inventory.containerBelt.itemList.Where(x => x.IsValid() && x.GetHeldEntity()).ToList()) { var slot = item.position; if ((item.info.shortname == "rock" && item.skin == 0uL) || item.info.shortname == "torch") { item.Remove(0f); continue; } else item.RemoveFromContainer(); player.inventory.UpdateContainer(0f, PlayerInventory.Type.Belt, player.inventory.containerBelt, false, 0f); uTs.timer.Once(0.15f, () => { if (item == null) return; item.MoveToContainer(player.inventory.containerBelt, slot, true); item.MarkDirty(); }); ItemManager.DoRemoves(); } if (player.inventory.containerWear.itemList.Count == 0) { var hz =  ItemManager.CreateByName("hazmatsuit_scientist", 1); player.inventory.GiveItem(hz, player.inventory.containerWear);  } uTs.timer.Once(0.3f, CrtTls); }  void GetTool(object[] tool) { var itemDef = ItemManager.FindItemDefinition((string)tool[1]); if (!itemDef) return; var p1 = player.inventory.FindItemID(itemDef.itemid); ulong skin = Convert.ToUInt64(tool[2]); if (p1 != null) { p1.skin = skin; p1.GetHeldEntity().skinID = skin; p1.name = (string)tool[0]; if (p1.CanMoveTo(player.inventory.containerBelt, -1, true)) { p1.MoveToContainer(player.inventory.containerBelt, -1, true); p1.MarkDirty(); } } else { var p2 = ItemManager.CreateByItemID(itemDef.itemid, 1, skin); if (p2 != null) { p2.name = (string)tool[0]; player.inventory.GiveItem(p2, player.inventory.containerBelt); p2.MarkDirty(); } } }  void CrtTls() { if (uTs.crtTlPlnnr) GetTool(uTs.playerTools[0]); if (uTs.crtTlRmvr) GetTool(uTs.playerTools[1]); if (uTs.crtTlHmmr) GetTool(uTs.playerTools[2]); }  bool GtCrrntTl() { sPlnnr = false; sRmvr = false; sHmmr = false; isWireTool = false; isAnotherHeld = false; DestroyInfo(); if (hldItm is Planner) { plnnr = hldItm as Planner; sPlnnr = true; sTpDplybl = plnnr.isTypeDeployable; DoPlannerInfo(); return true; } else if (hldItm is BaseProjectile && ctvtmLnk.skin == Convert.ToUInt64(uTs.playerTools[1][2])) { sRmvr = true; return true; } else if (hldItm is Hammer && ctvtmLnk.skin == Convert.ToUInt64(uTs.playerTools[2][2])) { sHmmr = true; DoHammerInfo(); return true; } else if (hldItm is AttackEntity) { isAnotherHeld = true; return true; } else if (hldItm is WireTool) { isWireTool = true; return true; }  return false; }  void ChkRmvr() { bool hsLsr = false; if (ctvtmLnk.info.shortname != (string)uTs.playerTools[1][1]) { sRmvr = false; hldItm = null; return; } ctvtmLnk.contents.flags = (ItemContainer.Flag)64; ctvtmLnk.contents.MarkDirty(); if (ctvtmLnk.contents != null && ctvtmLnk.contents.itemList.Count > 0) foreach ( var mod in ctvtmLnk.contents.itemList) if (mod.info.shortname == r("jrncba.zbq.ynfrefvtug")) { hsLsr = true; break; } if (!hsLsr) { var lMod =  ItemManager.CreateByName(r("jrncba.zbq.ynfrefvtug"), 1); if (lMod != null) if(lMod.MoveToContainer(ctvtmLnk.contents, -1, true)) hsLsr = true; else { sRmvr = false; hldItm = null; return; } } (hldItm as BaseProjectile).UnloadAmmo(ctvtmLnk, player); hldItm.SetLightsOn(true); DoRemoverInfo(); }  public void StHldItm(uint uid) { if (!initialized || uid == ctvtm) return; if (uid == 0u) { ctvtm = 0u; sPlnnr = false; sRmvr = false; sHmmr = false; isWireTool = false; sTpDplybl = false; construction = null; DestroyInfo(); return; } if (uid != ctvtm) { ctvtmLnk = player.inventory.containerBelt.FindItemByUID(uid); if (ctvtmLnk == null) return; ctvtm = uid; hldItm = ctvtmLnk.GetHeldEntity() as HeldEntity; if (hldItm == null) return; if (!GtCrrntTl()) return; if (sRmvr) { CuiHelper.DestroyUi(player, r("HgPebffUnveHV")); ChkRmvr(); } else if (sPlnnr || sHmmr) { construction = PrefabAttribute.server.Find<Construction>(sPlnnr && sTpDplybl && plnnr.GetDeployable() != null ? plnnr.GetDeployable().prefabID : lstPrfb); rttnOffst = Vector3.zero; if (sPlnnr) { if (sTpDplybl) DPlnnrUpdt(PType.Mode, ctvtmLnk.info.displayName.english); else DPlnnrUpdt(PType.Mode, $"{construction.info.name.english} ({((BuildingGrade.Enum)dfltGrd).ToString()})"); } else DPlnnrUpdt(PType.Mode); } } }  public void TckUpd(PlayerTick tick) { if (!initialized) return; bool changedInput = tick.inputState.aimAngles != lastAimAngles || tick.inputState.buttons != stt.previous.buttons || lastSocketForce; if (lastSocketForce) lastSocketForce = false; if (changedInput && !ctvTrgt) { rayHit = default(RaycastHit); lastAimAngles = tick.inputState.aimAngles; int layer = sRmvr && uTs.rmvrTlbjcts ? 1143089921 : 2097921; float range = 24f; if (sRmvr) range = uTs.rmvrTlDstnc; else if (sHmmr) range = uTs.hmmrTlDstnc; lastRay = new Ray(tick.position + new Vector3(0f, 1.5f, 0f), Quaternion.Euler(tick.inputState.aimAngles) * Vector3.forward); if (UnityEngine.Physics.Raycast(lastRay, out rayHit, range, layer, QueryTriggerInteraction.Ignore)) { var ent = rayHit.GetEntity(); if (ent != null && ent != rayEntity) { rayEntity = ent; ryDfntn = PrefabAttribute.server.Find<Construction>(rayEntity.prefabID); if (rayEntity.OwnerID > 0uL) rayEntityOwner = uTs.covalence.Players.FindPlayerById(rayEntity.OwnerID.ToString()); else rayEntityOwner = null; rayEntityName = ""; if (ryDfntn) rayEntityName = ryDfntn.info.name.english; if (rayEntityName.Length == 0) { if (rayEntity is BaseCombatEntity) { rayEntityName = (rayEntity as BaseCombatEntity).repair.itemTarget?.displayName.english; if (rayEntityName == null || rayEntityName.Length == 0) rayEntityName = rayEntity.ShortPrefabName; } else rayEntityName = rayEntity.ShortPrefabName; } if (ryDfntn == null && (rayEntity.PrefabName.EndsWith("static.prefab") || rayEntity.PrefabName.Contains("/deployable/"))) { ryDfntn = new Construction(); ryDfntn.rotationAmount = new Vector3(0,90f,0); ryDfntn.fullName = rayEntity.PrefabName; ryDfntn.maxplaceDistance = 8f; } } else if(ent == null) { rayEntity = null; ryDfntn = null; rayEntityOwner = null; rayEntityName = ""; } } else { rayEntity = null; ryDfntn = null; rayEntityOwner = null; rayEntityName = ""; } if (sPlnnr) { if (lstWrnng != string.Empty) DoWarning(string.Empty, true); target = default(Construction.Target); target.player = player; target.ray = lastRay; ChkPlcmnt(ref target, construction); if (target.socket != null && (target.socket != lastSocketBase || target.entity != lastSocketEntity || lastSocketForce)) { if (lastSocketForce) lastSocketForce = false; bool chEnt = false; if (uTs.adEffctFndtnsPlcmnt && construction.hierachyName.Contains("foundation") && lastSocketEntity != target.entity) { chEnt = true; SendEffectTo(3951505782, target.entity, player); } lastSocketEntity = target.entity; string name = target.entity.ShortPrefabName; if (target.entity is BuildingBlock) DPlnnrUpdt(PType.ConnectTo, $"{rayEntityName} [{target.entity.net.ID}] ({(target.entity as BuildingBlock).currentGrade.gradeBase.type.ToString()})"); else DPlnnrUpdt(PType.ConnectTo, $"{rayEntityName} [{target.entity.net.ID}]"); if (uTs.adEffctFndtnsPlcmnt && !chEnt && construction.hierachyName.Contains("foundation") && lastSocketBase != target.socket) SendEffectTo(3389733993, target.entity, player); lastSocketBase = target.socket; lastSocketPos = lastSocketEntity.transform.localToWorldMatrix.MultiplyPoint3x4(lastSocketBase.position); var s1 =  lastSocketBase.socketName.Replace($"{target.entity.ShortPrefabName}/sockets/","").TrimEnd('/','1','2','3','4').Replace("-"," ").Replace("â€“"," ");  DPlnnrUpdt(PType.ToSocket, $"{Oxide.Core.ExtensionMethods.TitleCase(s1)}"); lastPlacement = ChckPlcmnt(target, construction); if (lastPlacement != null) DPlnnrUpdt(PType.PosRot, $"{lastPlacement.position.ToString("N1")} | {lastPlacement.rotation.eulerAngles.y.ToString("N1")}Â°"); else DPlnnrUpdt(PType.PosRot); } if (sTpDplybl) { lastPlacement = ChckPlcmnt(target, construction); if (lastPlacement != null) { DPlnnrUpdt(PType.PosRot, $"{lastPlacement.position.ToString("N1")} | {lastPlacement.rotation.eulerAngles.ToString("N1")}"); DPlnnrUpdt(PType.ToSocket, "Terrain"); if (rayEntity) DPlnnrUpdt(PType.ConnectTo, $"{rayEntityName} [{rayEntity.net.ID}]"); } else { DPlnnrUpdt(PType.ToSocket); DPlnnrUpdt(PType.ConnectTo); DPlnnrUpdt(PType.PosRot); } } if (!sTpDplybl && !target.socket) { lastSocketBase = default(Socket_Base); lastSocketEntity = default(BaseEntity); DPlnnrUpdt(PType.ConnectTo); DPlnnrUpdt(PType.PosRot); DPlnnrUpdt(PType.ToSocket); } } else if (sHmmr) { if (lstWrnng != string.Empty) DoWarning(string.Empty, true); if (!ctvTrgt) { if (rayEntity && rayHit.distance <= uTs.hmmrTlDstnc) { if (ryDfntn && rayEntity is BuildingBlock) { DHmmrUpdt(HType.Target, $"{rayEntityName} [{rayEntity.net.ID}] ({(rayEntity as BuildingBlock).currentGrade.gradeBase.type.ToString()})"); DoCrosshair("0 1 0 0.75"); } else if (ryDfntn) { if(ryDfntn.fullName == StringPool.Get(3424003500)) { DHmmrUpdt(HType.Target, $"{rayEntityName} [{rayEntity.net.ID}] (Type: {(rayEntity as MiningQuarry).staticType})"); } else DHmmrUpdt(HType.Target, $"{rayEntityName} [{rayEntity.net.ID}]"); DoCrosshair("1 0.921568632 0.0156862754 0.75"); } else { DHmmrUpdt(HType.Target, $"{rayEntityName} [{rayEntity.net.ID}]"); } DHmmrUpdt(HType.Mode, "Modify"); DHmmrUpdt(HType.Building, rayEntity is DecayEntity ? $"ID {(rayEntity as DecayEntity).buildingID}" : "None");  if (ryDfntn) { float currentTime = UnityEngine.Time.realtimeSinceStartup; if (currentTime - lastPosRotUpdate >= 0.25f) { if (rayEntity is BuildingBlock) DHmmrUpdt(HType.PosRot, $"{rayEntity.transform.position.ToString("N1")} | {rayEntity.transform.rotation.eulerAngles.y.ToString("N1")}Â°"); else DHmmrUpdt(HType.PosRot, $"{rayEntity.transform.position.ToString("N1")} | {rayEntity.transform.rotation.eulerAngles.ToString("N1")}"); lastPosRotUpdate = currentTime; } if (rayEntityOwner != null) DHmmrUpdt(HType.Owner, $"{rayEntityOwner.Name}"); else DHmmrUpdt(HType.Owner, $"{rayEntity.OwnerID}"); } } else { DHmmrUpdt(HType.Target); DHmmrUpdt(HType.Building); DHmmrUpdt(HType.Mode, r("Zbqvsl")); DHmmrUpdt(HType.PosRot); DHmmrUpdt(HType.Owner); DoCrosshair("1 1 1 0.75"); } } else { DHmmrUpdt(HType.PosRot, $"{mvTrgt.entity.transform.position.ToString("N1")} | {mvTrgt.entity.transform.rotation.eulerAngles.ToString("N1")}"); DoCrosshair(string.Empty); } } else if (sRmvr) { DoCrosshair(string.Empty); if (rayEntity != null && rayHit.distance <= uTs.rmvrTlDstnc && (ryDfntn || (!ryDfntn && uTs.rmvrTlbjcts))) { DRmvrUpdt(RType.Remove, $"{rayEntityName} [{rayEntity.net.ID}]"); if (rayEntityOwner != null) DRmvrUpdt(RType.Owner, $"{rayEntityOwner.Name}"); else DRmvrUpdt(RType.Owner, $"{rayEntity.OwnerID}"); } else { DRmvrUpdt(RType.Remove); DRmvrUpdt(RType.Owner); } if (uTs.enblFllBldngRmvl && stt.IsDown(controlButtons[CmdType.RemoverHoldForAll]) && rayEntity is BuildingBlock) { DoWarning("1 0 0 0.75"); DRmvrUpdt(RType.Mode, "<color=#ffff00>Building</color>"); } else { DRmvrUpdt(RType.Mode, r("Fvatyr")); DoWarning(string.Empty); } } else if (isAnotherHeld) { if (hldItm is BaseLiquidVessel && (stt.WasJustReleased((BTN)1024) || stt.WasDown((BTN)2048))) { var vessel = hldItm as BaseLiquidVessel; if (vessel.AmountHeld() < 1) vessel.AddLiquid(ItemManager.FindItemDefinition("water"), vessel.MaxHoldable()); } else if (hldItm is BaseProjectile && stt.WasJustPressed((BTN)8192)) { var weapon = hldItm as BaseProjectile; if (!weapon.primaryMagazine.CanReload(player) && weapon.primaryMagazine.contents < weapon.primaryMagazine.capacity) { try { player.inventory.GiveItem(ItemManager.Create(weapon.primaryMagazine.ammoType, weapon.primaryMagazine.capacity - weapon.primaryMagazine.contents)); } catch{} ItemManager.DoRemoves(); } } else if (hldItm is FlameThrower && ( stt.WasJustPressed((BTN)8192) || stt.IsDown((BTN)1024))) { var flame = hldItm as FlameThrower; if ((stt.IsDown((BTN)1024) && flame.ammo < 2) || (stt.WasJustPressed((BTN)8192) && flame.ammo < flame.maxAmmo)) { flame.ammo = flame.maxAmmo; flame.SendNetworkUpdateImmediate(false); ItemManager.DoRemoves(); player.inventory.ServerUpdate(0f); } } else if (hldItm is Chainsaw && ( stt.WasJustPressed((BTN)8192) || stt.IsDown((BTN)1024) || stt.WasJustPressed((BTN)2048))) { var saw = hldItm as Chainsaw;  if ((stt.WasJustPressed((BTN)2048) && !saw.EngineOn())) { saw.SetEngineStatus(true); hldItm.SendNetworkUpdateImmediate(false); } else if ((stt.IsDown((BTN)1024) && saw.ammo < 2) || (stt.WasJustPressed((BTN)8192) && saw.ammo < saw.maxAmmo)) { saw.ammo = saw.maxAmmo; saw.SendNetworkUpdateImmediate(false); ItemManager.DoRemoves(); player.inventory.ServerUpdate(0f); } } } else if (isWireTool) {  } } else if (changedInput && ctvTrgt) { DHmmrUpdt(HType.PosRot, $"{mvTrgt.entity.transform.position.ToString("N1")} | {mvTrgt.entity.transform.rotation.eulerAngles.ToString("N1")}"); DoCrosshair(string.Empty, true); } if (sPlnnr && !sTpDplybl) { if (lastSocketBase != null && lastPlacement != null && lastSocketEntity) { OBB oBB = new OBB(lastPlacement.position, Vector3.one, lastPlacement.rotation, construction.bounds); Vector3 obb_pos = construction.hierachyName.Contains(r("sbhaqngvba")) ? oBB.position + (oBB.extents.y * Vector3.up) : oBB.position; Vector3 sock_pos = construction.hierachyName.Contains(r("sbhaqngvba")) ? new Vector3 (lastSocketPos.x, lastSocketEntity.transform.position.y, lastSocketPos.z) : lastSocketPos; player.SendConsoleCommand("ddraw.box", 0.05f, Color.green, obb_pos, 0.15f); player.SendConsoleCommand("ddraw.box", 0.05f, Color.green, sock_pos, 0.25f); player.SendConsoleCommand("ddraw.line", 0.05f, Color.green, obb_pos, sock_pos); } } }  void Update() { if (!ctvTrgt) return; if (!sPlcng && sHmmr) { if (mvTrgt.entity == null) { DoCrosshair("1 1 1 0.75"); mvTrgt = default(Construction.Target); sPlcng = false; ctvTrgt = false; return; } bool flag = mvTrgt.entity is SimpleBuildingBlock || mvCnstrctn.allSockets == null; mvTrgt.ray = player.eyes.BodyRay(); FndTrrnPlcmnt(ref mvTrgt, mvCnstrctn, tkDist, flag); Vector3 position = mvTrgt.entity.transform.position; Quaternion rotation = mvTrgt.entity.transform.rotation; Vector3 toPos = mvTrgt.position; Quaternion toRot = Quaternion.LookRotation(mvTrgt.entity.transform.up) * Quaternion.Euler(mvOffst); if (flag) { Vector3 direction = mvTrgt.ray.direction; direction.y = 0f; direction.Normalize(); toRot = Quaternion.Euler(mvOffst) * Quaternion.LookRotation(direction, Vector3.up); } var check = ChckPlcmnt(mvTrgt, mvCnstrctn); if (check != null) { toPos = check.position; toRot = check.rotation * Quaternion.Euler(mvOffst); } mvTrgt.entity.transform.position = Vector3.Lerp(position, toPos, UnityEngine.Time.deltaTime * 5f); mvTrgt.entity.transform.rotation = Quaternion.Lerp(rotation, toRot, UnityEngine.Time.deltaTime * 10f); DMvmntSnc(mvTrgt.entity); return; } else if (sPlcng) { if (mvTrgt.entity == null) { DoCrosshair("1 1 1 0.75"); mvTrgt = default(Construction.Target); sPlcng = false; ctvTrgt = false; return; } if (Vector3.Distance(mvTrgt.entity.transform.position, mvTrgt.position) <= 0.005f) { if (mvTrgtSnp && !(mvTrgtSnp is BuildingBlock)) { mvTrgt.entity.transform.position = mvTrgtSnp.transform.InverseTransformPoint(mvTrgt.position); mvTrgt.entity.transform.rotation = Quaternion.Inverse(mvTrgtSnp.transform.rotation) * Quaternion.Euler(mvTrgt.rotation); mvTrgt.entity.SetParent(mvTrgtSnp, 0u); } if (mvTrgtSnp) { DecayUpdate(mvTrgt.entity, true, mvCnstrctn.isBuildingPrivilege, mvTrgtSnp); mvTrgtSnp = null; } DMvmntSnc(mvTrgt.entity); DoCrosshair("1 1 1 0.75"); mvTrgt = default(Construction.Target); sPlcng = false; ctvTrgt = false; return; } mvTrgt.entity.transform.position = Vector3.Lerp(mvTrgt.entity.transform.position, mvTrgt.position, UnityEngine.Time.deltaTime * 10f); if (mvTrgtSnp == null || (mvTrgtSnp && !(mvTrgtSnp is BuildingBlock))) mvTrgt.entity.transform.rotation = Quaternion.Lerp(mvTrgt.entity.transform.rotation, Quaternion.Euler(mvTrgt.rotation), UnityEngine.Time.deltaTime * 10f); DMvmntSnc(mvTrgt.entity); return; } else if (!sPlcng && !sHmmr) { if (mvTrgt.valid) PlcOnTrgt(); else TrPlcTrgt(); } }  void DecayUpdate(BaseEntity entity, bool isAdding, bool isBuildingPrivilege, BaseEntity target = null) { DecayEntity dcEnt = entity as DecayEntity; if (dcEnt == null) return; BuildingManager.Building building = null; if (isAdding) { DecayEntity dcTgt = target != null ? target as DecayEntity : null; if (dcTgt != null) building = BuildingManager.server.GetBuilding(dcTgt.buildingID); if (building != null) { building.AddDecayEntity(dcEnt); if (isBuildingPrivilege) building.AddBuildingPrivilege(dcEnt as BuildingPrivlidge); building.Dirty(); dcEnt.buildingID = building.ID; } } else { building = BuildingManager.server.GetBuilding(dcEnt.buildingID); if (building != null) { if (building.decayEntities != null) building.RemoveDecayEntity(dcEnt); if (isBuildingPrivilege && building.buildingPrivileges != null) building.RemoveBuildingPrivilege(dcEnt as BuildingPrivlidge); building.Dirty(); } dcEnt.buildingID = 0u; } dcEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update); if (entity.children != null) foreach (BaseEntity current in entity.children) DecayUpdate(current, isAdding, isBuildingPrivilege, isAdding ? entity : null); }  void PlcOnTrgt() { if (mvTrgtSnp && !(mvTrgtSnp is BuildingBlock)) { mvTrgt.entity.transform.position = mvTrgtSnp.transform.worldToLocalMatrix.MultiplyPoint3x4(mvTrgt.position); mvTrgt.entity.transform.rotation = Quaternion.Inverse(mvTrgtSnp.transform.rotation) * mvTrgt.entity.transform.rotation; mvTrgt.entity.SetParent(mvTrgtSnp, 0u); } if (mvTrgtSnp) { DecayUpdate(mvTrgt.entity, true, mvCnstrctn.isBuildingPrivilege, mvTrgtSnp); mvTrgtSnp = null; } DMvmntSnc(mvTrgt.entity); mvTrgt = default(Construction.Target); ctvTrgt = false; sPlcng = false; }  void TrPlcTrgt() { RaycastHit hit; mvTrgtSnp = null; int layer = mvCnstrctn.isBuildingPrivilege ? 2097152 : 27328769; if (Physics.Raycast(mvTrgt.entity.transform.position, mvTrgt.entity.transform.up * -1.0f, out hit, float.PositiveInfinity, layer)) { mvTrgt.position = hit.point; if (hit.collider is UnityEngine.TerrainCollider) { mvTrgt.rotation = Quaternion.LookRotation(Vector3.Cross(mvTrgt.entity.transform.right, hit.normal)).eulerAngles; DHmmrUpdt(HType.Building, "None"); } else { mvTrgtSnp = hit.GetEntity(); if (mvTrgtSnp) { mvTrgt.rotation = mvTrgt.entity.transform.rotation.eulerAngles; DHmmrUpdt(HType.Building, rayEntity is DecayEntity ? $"ID {(rayEntity as DecayEntity).buildingID}" : "None"); } else DHmmrUpdt(HType.Building, "None"); } sPlcng = true; return; } else { mvTrgt = default(Construction.Target); ctvTrgt = false; sPlcng = false; return; } }  public object GtMvTrgt() { if (ctvTrgt && mvTrgt.entity != null) return (uint)mvTrgt.entity.net.ID; return null; }  void DMvmntSnc(BaseEntity entity, bool isChild = false) { if (entity == null) { DoCrosshair("1 1 1 0.75"); mvTrgt = default(Construction.Target); sPlcng = false; ctvTrgt = false; return; } bool force2 = entity.PrefabName == StringPool.Get(2206646561) || entity.PrefabName == StringPool.Get(2335812770); if (isChild || force2) {  if (Net.sv.write.Start()) { Net.sv.write.PacketID(Message.Type.EntityDestroy); Net.sv.write.UInt32(entity.net.ID); Net.sv.write.UInt8(0); Net.sv.write.Send(new SendInfo(entity.net.group.subscribers)); } entity.SendNetworkUpdateImmediate(false); if (isChild) return; } else { if (Net.sv.write.Start()) { Net.sv.write.PacketID(Message.Type.GroupChange); Net.sv.write.EntityID(entity.net.ID); Net.sv.write.GroupID(entity.net.group.ID); Net.sv.write.Send(new SendInfo(entity.net.group.subscribers)); } if (Net.sv.write.Start()) { Net.sv.write.PacketID(Message.Type.EntityPosition); Net.sv.write.EntityID(entity.net.ID); Net.sv.write.Vector3(entity.GetNetworkPosition()); Net.sv.write.Vector3(entity.GetNetworkRotation().eulerAngles); Net.sv.write.Float(entity.GetNetworkTime()); Write write = Net.sv.write; SendInfo info = new SendInfo(entity.net.group.subscribers); info.method = SendMethod.ReliableUnordered; info.priority = Priority.Immediate; write.Send(info); } } if (force2 && entity && entity.children != null) foreach (BaseEntity current in entity.children) DMvmntSnc(current, true); }  public void DoTi() { if (!initialized || !hldItm) return; if (sPlnnr) { if (true) { if (stt.WasJustPressed(controlButtons[CmdType.PlannerPlace])) { DoPl(); return; } else if (stt.WasJustPressed(controlButtons[CmdType.PlannerRotate])) { Vector3 vector = Vector3.zero; if (construction && construction.canRotate) vector = construction.rotationAmount; rttnOffst.x = Mathf.Repeat(rttnOffst.x + vector.x, 360f); rttnOffst.y = Mathf.Repeat(rttnOffst.y + vector.y, 360f); rttnOffst.z = Mathf.Repeat(rttnOffst.z + vector.z, 360f); return; } } if (!sTpDplybl) { if (stt.WasJustPressed((BTN)2048)) { BldMnUI(uTs.plyrPrfs.PlyData[player.userID].SF); return; } else if (stt.IsDown(controlButtons[CmdType.PlannerTierChange])) { if (stt.WasJustPressed(controlButtons[CmdType.PlannerTierNext])) { dfltGrd++; if (dfltGrd > 4) dfltGrd = 0; uTs.plyrPrfs.PlyData[player.userID].DBG = dfltGrd; DPlnnrUpdt(PType.Mode, $"{construction.info.name.english} ({((BuildingGrade.Enum)dfltGrd).ToString()})"); return; } else if (stt.WasJustPressed(controlButtons[CmdType.PlannerTierPrev])) { dfltGrd--; if (dfltGrd < 0) dfltGrd = 4; uTs.plyrPrfs.PlyData[player.userID].DBG = dfltGrd; DPlnnrUpdt(PType.Mode, $"{construction.info.name.english} ({((BuildingGrade.Enum)dfltGrd).ToString()})"); return; } } } else if (sTpDplybl){} } else if (sHmmr) { if (ctvTrgt) { if (sPlcng){} else if (!sPlcng) { if (stt.WasJustPressed(controlButtons[CmdType.HammerTransform])) { if (mvTrgt.valid) PlcOnTrgt(); else TrPlcTrgt(); return; } else if (stt.WasJustPressed(controlButtons[CmdType.HammerRotate])) { Vector3 vector = Vector3.zero; if (mvCnstrctn && mvCnstrctn.canRotate) { if (stt.IsDown(controlButtons[CmdType.HammerRotateDirection])) vector =- mvCnstrctn.rotationAmount; else vector = mvCnstrctn.rotationAmount; } mvOffst.x = Mathf.Repeat(mvOffst.x + vector.x, 360f); mvOffst.y = Mathf.Repeat(mvOffst.y + vector.y, 360f); mvOffst.z = Mathf.Repeat(mvOffst.z + vector.z, 360f); return; } } } else if (!ctvTrgt) { if (stt.WasJustPressed(controlButtons[CmdType.HammerChangeGrade]) && rayEntity && rayEntity.IsValid() && rayEntity is BuildingBlock) { BuildingBlock block = rayEntity as BuildingBlock; var grade = (int)block.currentGrade.gradeBase.type; grade++; if (grade >= block.blockDefinition.grades.Length) grade = 1; block.SetGrade((BuildingGrade.Enum)grade); block.SetHealthToMax(); block.StartBeingRotatable(); rayEntity.SendNetworkUpdate(BasePlayer.NetworkQueue.Update); block.UpdateSkin(false); BuildingManager.Building building = BuildingManager.server.GetBuilding(block.buildingID); if (building != null) building.Dirty(); if (uTs.ffctPrmtngBlcksOn) Effect.server.Run("assets/bundled/prefabs/fx/build/promote_" + ((BuildingGrade.Enum)grade).ToString().ToLower() + ".prefab", rayEntity, 0u, Vector3.zero, Vector3.zero, null, false); } else if (stt.WasJustPressed(controlButtons[CmdType.HammerToggleOnOff]) && rayEntity && rayEntity.IsValid() && !(rayEntity is BuildingBlock)) { var r = rayEntity; if (r is StorageContainer || r is IOEntity) { bool isOn = r.HasFlag(BaseEntity.Flags.On); bool hasPower = isOn & r is IOEntity; if (r is SearchLight && !isOn) (r as SearchLight).secondsRemaining = float.PositiveInfinity; r.SetFlag(BaseEntity.Flags.On, !isOn, false); if(r is IOEntity) r.SetFlag(BaseEntity.Flags.Reserved8, !hasPower, false); r.SendNetworkUpdate(); return; } else if (r is MiningQuarry) { var q = r as MiningQuarry; q.staticType = (MiningQuarry.QuarryType)(int)q.staticType+1; if ((int)q.staticType > 3) q.staticType = (MiningQuarry.QuarryType)0; q.UpdateStaticDeposit(); } else if(r is EngineSwitch) { var miningQuarry = r.GetParentEntity() as MiningQuarry; if (miningQuarry) miningQuarry.EngineSwitch(true); } } else if (stt.WasJustPressed(controlButtons[CmdType.HammerRotate])) { if (!rayEntity || !rayEntity.IsValid() || ryDfntn == null || ryDfntn.rotationAmount.y == 0f) return; string effectPath = ryDfntn.deployable != null && ryDfntn.deployable.placeEffect.isValid ? ryDfntn.deployable.placeEffect.resourcePath : StringPool.Get(2598153373); if (stt.IsDown(controlButtons[CmdType.HammerRotateDirection])) rayEntity.transform.Rotate(-ryDfntn.rotationAmount); else rayEntity.transform.Rotate(ryDfntn.rotationAmount); if (rayEntity is StabilityEntity) { rayEntity.RefreshEntityLinks(); if (!uTs.vrrdStbltWhlBld && !(rayEntity as StabilityEntity).grounded) (rayEntity as StabilityEntity).UpdateSurroundingEntities(); if (rayEntity is BuildingBlock) { var conskin = rayEntity.gameObject.GetComponentInChildren<ConstructionSkin>(); if (conskin) conskin.Refresh(rayEntity as BuildingBlock); rayEntity.ClientRPC(null, r("ErserfuFxva")); } } DMvmntSnc(rayEntity); Effect.server.Run(effectPath, rayEntity, 0u, Vector3.zero, Vector3.zero, null, false); } else if (stt.WasJustPressed(controlButtons[CmdType.HammerTransform])) { if (mvTrgt.entity != null) { mvTrgt = default(Construction.Target); ctvTrgt = false; sPlcng = false; return; } if (!rayEntity || rayEntity is BuildingBlock || rayEntity.FindLinkedEntity<BuildingBlock>()) return; if (rayEntity is BaseMountable && (rayEntity as BaseMountable)._mounted != null) return; mvCnstrctn = PrefabAttribute.server.Find<Construction>(rayEntity.prefabID); if (mvCnstrctn == null) { if (!rayEntity.PrefabName.EndsWith("static.prefab") && !rayEntity.PrefabName.Contains("/deployable/")) return; mvCnstrctn = new Construction(); mvCnstrctn.rotationAmount = new Vector3(0,90f,0); mvCnstrctn.fullName = rayEntity.PrefabName; mvCnstrctn.maxplaceDistance = rayEntity is MiningQuarry ? 8f : 4f; mvCnstrctn.canRotate = true; } if (rayEntity is DecayEntity) { DecayUpdate(rayEntity, false, mvCnstrctn.isBuildingPrivilege); DHmmrUpdt(HType.Building, "None"); } mvTrgt = default(Construction.Target); mvOffst = Vector3.zero; if (rayEntity.HasParent()) { var position = rayEntity.transform.position; var rotation = rayEntity.transform.rotation; rayEntity.SetParent(null, 0u); rayEntity.transform.position = position; rayEntity.transform.rotation = rotation; DMvmntSnc(rayEntity); } if (rayEntity.children.Count == 0 || !rayEntity.HasParent()) { DMvmntSnc(rayEntity); } tkDist = Mathf.Clamp(Vector3.Distance(rayEntity.transform.position, lastRay.origin), mvCnstrctn.maxplaceDistance, mvCnstrctn.maxplaceDistance * 3f); mvTrgt.entity = rayEntity; sPlcng = false; ctvTrgt = true; DHmmrUpdt(HType.Mode, r("Ercbfvgvbavat")); } else if (stt.WasJustPressed(controlButtons[CmdType.HammerAuthInfo]) && !stt.WasDown(controlButtons[CmdType.HammerTransform]) && (uTs.nblHmmrTcInf || uTs.nblHmmrLckInf)) { string infoMsg = ""; if (uTs.nblHmmrTcInf && rayEntity && rayEntity is BuildingPrivlidge && rayEntity.Distance(player.transform.position) > 1.25f) { var hasClans = uTs.Clans != null ? true : false; var sb = new StringBuilder(); rayEntityName = (rayEntity as BaseCombatEntity).repair.itemTarget?.displayName.english; sb.Append($">\nAuthentication list of <color=#ffa500>{rayEntityName}</color> (<color=#00ffff>{rayEntity.net.ID}</color>)"); var iPlayer = uTs.covalence.Players.FindPlayerById(rayEntity.OwnerID.ToString()); if (iPlayer != null) { sb.Append($" | Owner: <color=#ffa500>{iPlayer.Name}</color> (<color=#00ffff>{iPlayer.Id}</color>) | "); if (iPlayer.IsConnected) sb.AppendLine($"Status: <color=#008000>Online</color>"); else sb.AppendLine($"Status: <color=#ffffff>Offline</color>"); } TextTable textTable = new TextTable(); textTable.AddColumn("Name"); textTable.AddColumn("UserID"); if (hasClans) textTable.AddColumn("Clan"); textTable.AddColumn("Status"); foreach (var nameID in (rayEntity as BuildingPrivlidge).authorizedPlayers.ToList()) { var authedP = uTs.covalence.Players.FindPlayerById(nameID.userid.ToString()); if (authedP == null) continue; if (hasClans) { var clanTag = "-"; string tag = (string)uTs.Clans?.Call("GetClanOf", Convert.ToUInt64(authedP.Id)); if (tag != null) clanTag = tag; textTable.AddRow(new string[]	{ authedP.Name, authedP.Id, clanTag, ((authedP as RustPlayer).IsConnected ? "<color=#008000>Online</color>" : "<color=#ffffff>Offline</color>").ToString() }); } else textTable.AddRow(new string[]	{ authedP.Name, authedP.Id, ((authedP as RustPlayer).IsConnected ? "<color=#008000>Online</color>" : "<color=#ffffff>Offline</color>").ToString() }); }  sb.AppendLine(textTable.ToString()); player.ConsoleMessage(sb.ToString()); infoMsg += $"<color=#ffa500>TC</color> (<color=#00ffff>{rayEntity.net.ID}</color>) authorized players sent to console"; } if (uTs.nblHmmrLckInf && rayEntity && rayEntity.HasSlot(BaseEntity.Slot.Lock) && rayEntity.GetSlot(BaseEntity.Slot.Lock) is CodeLock) { var hasClans = uTs.Clans != null ? true : false; var codeLock = (CodeLock)rayEntity.GetSlot(BaseEntity.Slot.Lock); var sb = new StringBuilder(); rayEntityName = (rayEntity as BaseCombatEntity).repair.itemTarget?.displayName.english; sb.Append($">\nCodeLock info for <color=#ffa500>{rayEntityName}</color> (<color=#00ffff>{rayEntity.net.ID}</color>)"); var iPlayer = uTs.covalence.Players.FindPlayerById(rayEntity.OwnerID.ToString()); if (iPlayer != null) { sb.Append($" | Owner: <color=#ffa500>{iPlayer.Name}</color> (<color=#00ffff>{iPlayer.Id}</color>) | "); if (iPlayer.IsConnected) sb.AppendLine($"Status: <color=#008000>Online</color>"); else sb.AppendLine($"Status: <color=#ffffff>Offline</color>"); }  string code = codeLock.hasCode ?  $"<color=#00ffff>{codeLock.code}</color>" : "<color=#00ffff>Not set</color>"; string guest = codeLock.hasGuestCode ?  $"<color=#00ffff>{codeLock.guestCode}</color>" : "<color=#00ffff>Not set</color>"; sb.AppendLine($"Lock code:  {code} | Guest code: {guest}");  if (codeLock.whitelistPlayers != null && codeLock.whitelistPlayers.Count > 0) { sb.AppendLine("Whitelisted:"); TextTable textTable = new TextTable(); textTable.AddColumn("Name"); textTable.AddColumn("UserID"); if (hasClans) textTable.AddColumn("Clan"); textTable.AddColumn("Status");  foreach (var userID in codeLock.whitelistPlayers.ToList()) { var authedP = uTs.covalence.Players.FindPlayerById(userID.ToString()); if (authedP == null) continue; if (hasClans) { string clanTag = (string)uTs.Clans?.Call("GetClanOf", Convert.ToUInt64(authedP.Id)); if (clanTag.Length == 0) clanTag = "-"; textTable.AddRow(new string[]	{ authedP.Name, authedP.Id, clanTag, (authedP.IsConnected ? "<color=#008000>Online</color>" : "<color=#ffffff>Offline</color>").ToString() }); } else textTable.AddRow(new string[]	{ authedP.Name, authedP.Id, (authedP.IsConnected ? "<color=#008000>Online</color>" : "<color=#ffffff>Offline</color>").ToString() }); }  sb.AppendLine(textTable.ToString()); } else sb.AppendLine("Whitelisted: <color=#ffffff>None</color>"); if (codeLock.guestPlayers != null && codeLock.guestPlayers.Count > 0) { sb.AppendLine("Guests:"); TextTable textTable = new TextTable(); textTable.AddColumn("Name"); textTable.AddColumn("UserID"); if (hasClans) textTable.AddColumn("Clan"); textTable.AddColumn("Status");  foreach (var userID in codeLock.guestPlayers.ToList()) { var authedP = uTs.covalence.Players.FindPlayerById(userID.ToString()); if (authedP == null) continue; if (hasClans) { string clanTag = (string)uTs.Clans?.Call("GetClanOf", Convert.ToUInt64(authedP.Id)); if (clanTag.Length == 0) clanTag = "-"; textTable.AddRow(new string[]	{ authedP.Name, authedP.Id, clanTag, (authedP.IsConnected ? "<color=#008000>Online</color>" : "<color=#ffffff>Offline</color>").ToString() }); } else textTable.AddRow(new string[]	{ authedP.Name, authedP.Id, (authedP.IsConnected ? "<color=#008000>Online</color>" : "<color=#ffffff>Offline</color>").ToString() }); }  sb.AppendLine(textTable.ToString()); } else sb.AppendLine("Guests: <color=#ffffff>None</color>"); player.ConsoleMessage(sb.ToString()); infoMsg += (infoMsg.Length > 0 ? "\n" : "") + $"<color=#ffa500>{rayEntityName == "Tool Cupboard" ? "TC" : rayEntityName}</color> (<color=#00ffff>{rayEntity.net.ID}</color>) CodeLock info sent to console"; } if (infoMsg.Length > 0) player.ChatMessage(uTs.ChatMsg(infoMsg)); } } } else if (sRmvr) { if (stt.WasJustPressed(controlButtons[CmdType.RemoverRemove])) { if (!stt.IsDown(controlButtons[CmdType.RemoverHoldForAll])) DoRm(); else if (stt.IsDown(controlButtons[CmdType.RemoverHoldForAll])) DoRm(true); } rayEntity = null; ryDfntn = null; } }  void FndTrrnPlcmnt(ref Construction.Target t, Construction c, float maxDistance, bool isQuarry = false ) { int layer = 27328769; if (isQuarry) layer = 10551297; RaycastHit[] hits = Physics.RaycastAll(t.ray, maxDistance, layer); if (hits.Length > 1) { GamePhysics.Sort(hits); for (int i = 0; i < hits.Length; i++) { if (hits[i].collider.transform.root != t.entity.transform.root) { t.position = t.ray.origin + t.ray.direction * hits[i].distance; t.normal = hits[i].normal; t.rotation = Vector3.zero; t.onTerrain = true; t.valid = true; if (!isQuarry) mvTrgtSnp = hits[i].GetEntity(); return; } } } t.position = t.ray.origin + t.ray.direction * maxDistance; t.normal = Vector3.up; t.rotation = Vector3.zero; t.onTerrain = true; t.valid = false; mvTrgtSnp = null; }  public void StBlckPrfb(uint p) { construction = PrefabAttribute.server.Find<Construction>(p); rttnOffst = Vector3.zero; lstPrfb = p; DPlnnrUpdt(PType.Mode, $"{construction.info.name.english} ({((BuildingGrade.Enum)dfltGrd).ToString()})"); lastPlacement = null; lastSocketForce = true; }  public void OnDestroy() { DoCrosshair(string.Empty, true); DoWarning(string.Empty, true); foreach (var item in player.inventory.AllItems().Where(x => x.IsValid()).ToList()) { if (item.skin == Convert.ToUInt64(uTs.playerTools[0][2]) || item.skin == Convert.ToUInt64(uTs.playerTools[1][2]) || item.skin == Convert.ToUInt64(uTs.playerTools[2][2])) { item.skin = 0uL; item.GetHeldEntity().skinID = 0uL; item.name = string.Empty; item.MarkDirty(); } } DestroyInfo(); GameObject.Destroy(this); }  void DoRm(bool remAl = false) { if (!rayEntity || (rayEntity is BasePlayer && !(rayEntity is NPCPlayer)) || (!uTs.rmvrTlbjcts && !ryDfntn)) return; if (rayEntity.IsValid()) { if (rayEntity is BuildingBlock) { if (uTs.enblFllBldngRmvl && remAl) { CollRm(rayEntity); return; } else { if (uTs.ffctRmvngBlcksOn) Effect.server.Run(uTs.ffctRmvngBlcks, rayEntity, 0u, Vector3.zero, Vector3.zero, null, false); rayEntity.Kill(BaseNetworkable.DestroyMode.Gib); rayEntity = null; ryDfntn = null; return; } } else { if (rayEntity is OreResourceEntity) (rayEntity as OreResourceEntity).CleanupBonus(); else if (rayEntity is BaseNpc || rayEntity is NPCPlayer || rayEntity is BradleyAPC || rayEntity is BaseHelicopter) (rayEntity as BaseCombatEntity).DieInstantly(); else { if (!uTs.entRemoval.Contains(rayEntity.transform.root)) uTs.entRemoval.Add(rayEntity.transform.root); rayEntity.Kill(BaseNetworkable.DestroyMode.Gib); } rayEntity = null; ryDfntn = null; } } else { GameManager.Destroy(rayEntity.gameObject, 0f); rayEntity = null; ryDfntn = null; } }  void CollRm(BaseEntity srcntt) { var bldngBlck = srcntt.GetComponent<BuildingBlock>(); if (bldngBlck) { var building = BuildingManager.server.GetBuilding(bldngBlck.buildingID); ServerMgr.Instance.StartCoroutine(DlyRm(building.buildingBlocks.ToList(), building.decayEntities.ToList(), building.buildingPrivileges.ToList())); } }  WaitForEndOfFrame wait = new WaitForEndOfFrame();  IEnumerator DlyRm(List<BuildingBlock> bLst, List<DecayEntity> dLst, List<BuildingPrivlidge> pLst) { var mode = uTs.gbsRmvBldng ? BaseNetworkable.DestroyMode.Gib : BaseNetworkable.DestroyMode.None; for (int i = 0; i < pLst.Count; i++) { if (!pLst[i].IsDestroyed) { if (pLst[i] == rayEntity) { rayEntity = null; ryDfntn = null; } pLst[i].Kill(mode); yield return wait; } } for (int i = 0; i < dLst.Count; i++) { if (!dLst[i].IsDestroyed) { if (dLst[i] == rayEntity) { rayEntity = null; ryDfntn = null; } dLst[i].Kill(mode); yield return wait; } } for (int i = 0; i < bLst.Count; i++) { if (!bLst[i].IsDestroyed) { if (bLst[i] == rayEntity) { rayEntity = null; ryDfntn = null; } bLst[i].Kill(mode); yield return wait; } } yield break; }  void DoPl() { ChkQrr(construction); Deployable dplybl = plnnr.GetDeployable(); GameObject gameObject = DoPlaG(target, construction); if (gameObject != null) { Interface.CallHook(r("BaRagvglOhvyg"), new object[] {plnnr, gameObject}); if (dplybl != null) { if (dplybl.placeEffect.isValid) { if (target.entity && target.socket) Effect.server.Run(dplybl.placeEffect.resourcePath, target.entity.transform.TransformPoint(target.socket.worldPosition), target.entity.transform.up, null, false); else Effect.server.Run(dplybl.placeEffect.resourcePath, target.position, target.normal, null, false); } BaseEntity bsntt = gameObject.ToBaseEntity(); if (!(bsntt is MiningQuarry) && target.entity != null && !(target.entity is BuildingBlock)) { bsntt.transform.position = target.entity.transform.worldToLocalMatrix.MultiplyPoint3x4(target.position); bsntt.transform.rotation = Quaternion.Inverse(target.entity.transform.rotation) * bsntt.transform.rotation; bsntt.SetParent(target.entity, 0u); } if (dplybl.wantsInstanceData && ctvtmLnk.instanceData != null) (bsntt as IInstanceDataReceiver).ReceiveInstanceData(ctvtmLnk.instanceData); if (dplybl.copyInventoryFromItem) { StorageContainer component2 = bsntt.GetComponent<StorageContainer>(); if (component2) { component2.ReceiveInventoryFromItem(ctvtmLnk); ctvtmLnk.OnVirginSpawn(); ctvtmLnk.MarkDirty(); } } } } }  void ChkPlcmnt(ref Construction.Target t, Construction c) { t.valid = false; if (c.socketHandle != null) { Vector3 worldPosition = c.socketHandle.worldPosition; Vector3 a = t.ray.origin + t.ray.direction * c.maxplaceDistance; Vector3 a2 = a - worldPosition; var oldDir = t.ray.direction; t.ray.direction = (a2 - t.ray.origin).normalized; } List<BaseEntity> list = Pool.GetList<BaseEntity>(); float num = 3.40282347E+38f; Vis.Entities<BaseEntity>(t.ray.origin, c.maxplaceDistance * 2f, list, 18874625, QueryTriggerInteraction.Collide); foreach (BaseEntity current in list) { Construction con = PrefabAttribute.server.Find<Construction>(current.prefabID); if (!(con == null)) { Socket_Base[] allSockets = con.allSockets; for (int i = 0; i < allSockets.Length; i++) { Socket_Base socket_Base = allSockets[i]; if (socket_Base.female && !socket_Base.femaleDummy) { RaycastHit raycastHit; if (socket_Base.GetSelectBounds(current.transform.position, current.transform.rotation).Trace(t.ray, out raycastHit, float.PositiveInfinity)) { if (raycastHit.distance >= 1f) { if (raycastHit.distance <= num) { if (!current.IsOccupied(socket_Base)) { Construction.Target trgt2 = default(Construction.Target); trgt2.socket = socket_Base; trgt2.entity = current; trgt2.ray = t.ray; trgt2.valid = true; trgt2.player = player; trgt2.rotation = rttnOffst; if (c.HasMaleSockets(trgt2)) { t = trgt2; num = raycastHit.distance; } } } } } } } } } if (t.valid) { Pool.FreeList<BaseEntity>(ref list); return; } if (c.deployable == null && list.Count > 0) { list.Clear(); Vis.Entities<BaseEntity>(t.ray.origin, 3f, list, 2097152, QueryTriggerInteraction.Ignore); if (list.Count > 0) { Pool.FreeList<BaseEntity>(ref list); return; } } if (GamePhysics.Trace(t.ray, 0f, out rayHit, c.maxplaceDistance, 27328769, QueryTriggerInteraction.Ignore)) { t.position = t.ray.origin + t.ray.direction * rayHit.distance; t.rotation = rttnOffst; t.normal = rayHit.normal; t.onTerrain = true; t.valid = true; t.entity = rayHit.GetEntity(); } else { t.position = t.ray.origin + t.ray.direction * c.maxplaceDistance; t.rotation = rttnOffst; t.normal = Vector3.up; if (c.hierachyName.Contains(r("sbhaqngvba"))) { t.valid = true; t.onTerrain = true; } else { t.valid = false; t.onTerrain = false; } } Pool.FreeList<BaseEntity>(ref list); }  void ChkQrr(Construction c) { if (StringPool.Get(672916883).Equals(c.fullName)) { var crt = GameManager.server.CreateEntity(StringPool.Get(2955484243), Vector3.zero, Quaternion.identity, true); crt.transform.position = rayHit.point; crt.Spawn(); ChkPlcmnt(ref target, construction);  } if (StringPool.Get(1599225199).Equals(c.fullName)) { var crt = GameManager.server.CreateEntity(StringPool.Get(1917257452), Vector3.zero, Quaternion.identity, true); crt.transform.position = rayHit.point; crt.Spawn(); ChkPlcmnt(ref target, construction); } }  public GameObject DoPlaG(Construction.Target p, Construction component) { BaseEntity bsntt = CrtCnstrctn(p, component); if (!bsntt) return null; float num = 1f; bsntt.skinID = ctvtmLnk.skin; bsntt.gameObject.AwakeFromInstantiate(); BuildingBlock bBl = bsntt as BuildingBlock; if (bBl) { bBl.blockDefinition = PrefabAttribute.server.Find<Construction>(bBl.prefabID); if (!bBl.blockDefinition) return null; bBl.SetGrade((BuildingGrade.Enum)dfltGrd); float num2 = bBl.currentGrade.maxHealth; } BaseCombatEntity bsCmbtntt = bsntt as BaseCombatEntity; if (bsCmbtntt) { float num2 = (!(bBl != null)) ? bsCmbtntt.startHealth : bBl.currentGrade.maxHealth; bsCmbtntt.ResetLifeStateOnSpawn = false; bsCmbtntt.InitializeHealth(num2 * num, num2); }  bsntt.OwnerID = player.userID; var stabilityEntity = bsntt as StabilityEntity; bool setGrounded = false; if (stabilityEntity && uTs.vrrdStbltWhlBld) { stabilityEntity.grounded = true; setGrounded = true; } if (uTs.dsblDplyblGrndChcks && !bBl) { UnityEngine.Object.Destroy(bsntt.GetComponent<DestroyOnGroundMissing>()); UnityEngine.Object.Destroy(bsntt.GetComponent<GroundWatch>()); } bsntt.Spawn(); if (bBl && uTs.ffctPlcngBlcksOn) Effect.server.Run(uTs.ffctPlcngBlcks, bsntt, 0u, Vector3.zero, Vector3.zero); if (stabilityEntity && !setGrounded) stabilityEntity.UpdateSurroundingEntities(); return bsntt.gameObject; }  BaseEntity CrtCnstrctn(Construction.Target target, Construction component) { var path = component.fullName; if (component.fullName.Equals(StringPool.Get(672916883))) path = StringPool.Get(3424003500); if (component.fullName.Equals(StringPool.Get(1599225199))) path = StringPool.Get(3449840583); GameObject gameObject = GameManager.server.CreatePrefab(path, Vector3.zero, Quaternion.identity, false); bool flag = UpdtPlcmnt(gameObject.transform, component, ref target); BaseEntity bsntt = gameObject.ToBaseEntity(); if (!flag) { if (bsntt.IsValid()) bsntt.Kill(BaseNetworkable.DestroyMode.None); else GameManager.Destroy(gameObject, 0f); return null; } DecayEntity dcyEntt = bsntt as DecayEntity; if (dcyEntt) dcyEntt.AttachToBuilding(target.entity as DecayEntity); return bsntt; }  Construction.Placement ChckPlcmnt(Construction.Target t, Construction c) { List<Socket_Base> list = Pool.GetList<Socket_Base>(); Construction.Placement plcmnt = null; if (c.allSockets == null || c.allSockets.Length == 0) return plcmnt; c.FindMaleSockets(t, list); foreach (Socket_Base current in list) if (!(t.entity != null) || !(t.socket != null) || !t.entity.IsOccupied(t.socket)) plcmnt = current.DoPlacement(t); Pool.FreeList<Socket_Base>(ref list); return plcmnt; }  bool UpdtPlcmnt(Transform tn, Construction common, ref Construction.Target target) { if (!target.valid) return false; List<Socket_Base> list = Pool.GetList<Socket_Base>(); common.canBypassBuildingPermission = true; common.FindMaleSockets(target, list); Construction.lastPlacementError = string.Empty; Regex _errOrr = new Regex(@"Not enough space|not in terrain|AngleCheck|Sphere Test|IsInArea|cupboard", RegexOptions.Compiled); foreach (Socket_Base current in list) { Construction.Placement plcmnt = null; if (!(target.entity != null) || !(target.socket != null) || !target.entity.IsOccupied(target.socket)) { if (plcmnt == null) plcmnt = current.DoPlacement(target); if (plcmnt != null) { DeployVolume[] volumes = PrefabAttribute.server.FindAll<DeployVolume>(common.prefabID); if (DeployVolume.Check(plcmnt.position, plcmnt.rotation, volumes, -1)) { if (StringPool.Get(672916883).Contains(common.fullName) || StringPool.Get(1599225199).Contains(common.fullName)) { tn.position = plcmnt.position; tn.rotation = plcmnt.rotation;  Pool.FreeList<Socket_Base>(ref list); return true; } } if (BuildingProximity.Check(target.player, common, plcmnt.position, plcmnt.rotation)) { tn.position = plcmnt.position; tn.rotation = plcmnt.rotation; } else if (common.isBuildingPrivilege && !target.player.CanPlaceBuildingPrivilege(plcmnt.position, plcmnt.rotation, common.bounds)) { tn.position = plcmnt.position; tn.rotation = plcmnt.rotation; } else { tn.position = plcmnt.position; tn.rotation = plcmnt.rotation; Pool.FreeList<Socket_Base>(ref list); return true; } } } } Pool.FreeList<Socket_Base>(ref list); if(_errOrr.IsMatch(Construction.lastPlacementError)) return true; return false; }  public void SendEffectTo(uint id, BaseEntity ent, BasePlayer player) { Effect effect = new Effect(); effect.Init(Effect.Type.Generic, ent.transform.position, player.transform.forward, null); effect.pooledString = StringPool.Get(id); EffectNetwork.Send(effect, player.net.connection); }  void DestroyInfo(UType uType = UType.All) { CuiHelper.DestroyUi(player, r("HgPebffUnveHV")); if (uType == UType.All) { CuiHelper.DestroyUi(player, UType.PlannerUi.ToString()); CuiHelper.DestroyUi(player, UType.RemoverUi.ToString()); CuiHelper.DestroyUi(player, UType.HammerUi.ToString()); plannerInfoStatus = false; removerInfoStatus = false; hammerInfoStatus = false; } else { CuiHelper.DestroyUi(player, uType.ToString()); switch( uType ) { case UType.PlannerUi: plannerInfoStatus = false; break; case UType.RemoverUi: removerInfoStatus = false; break; case UType.HammerUi: hammerInfoStatus = false; break; default: break; } } }  void DoPlannerInfo() { if (!uTs.showPlannerInfo) return; var panelName = UType.PlannerUi.ToString(); DestroyInfo(UType.PlannerUi); var mainContainer = new CuiElementContainer() { { new CuiPanel { Image = {Color = "0 0 0 0"}, RectTransform = {AnchorMin = $"{panelPosX.ToString()} {panelPosY.ToString()}", AnchorMax =$"{(panelPosX+0.3f).ToString()} {(panelPosY+0.15f).ToString()}"} }, new CuiElement().Parent = "Under", panelName } }; CuiHelper.AddUi(player, mainContainer); plannerInfoStatus = true; DPlnnrUpdt(PType.Mode); DPlnnrUpdt(PType.ToSocket); DPlnnrUpdt(PType.PosRot); DPlnnrUpdt(PType.ConnectTo); }  void DPlnnrUpdt(PType pType, string infoMsg = " - ") { if (!sPlnnr) return; if (!plannerInfoStatus) DoPlannerInfo(); int maxRows = System.Enum.GetValues(typeof(PType)).Length; int rowNumber = (int)pType; var fieldName = pType.ToString(); if (rowNumber == 0) { if (sTpDplybl) fieldName = "Place"; else fieldName = "Build"; } var mainPanel = UType.PlannerUi.ToString() + fieldName; CuiHelper.DestroyUi(player, mainPanel); var value = 1 / (float)maxRows; var positionMin = 1 - (value * rowNumber); var positionMax = 2 - (1 - (value * (1 - rowNumber)));  var container = new CuiElementContainer() { { new CuiPanel { Image = {Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0 " + positionMin.ToString("0.####"), AnchorMax = $"1 "+ positionMax.ToString("0.####") }, }, new CuiElement().Parent = UType.PlannerUi.ToString(), mainPanel } };  var innerLine = new CuiElement { Name = CuiHelper.GetGuid(), Parent = mainPanel, Components = { new CuiRawImageComponent { Color = "0 0 0 1", Sprite = r("nffrgf/pbagrag/hv/qrirybcre/qrirybczragfxva/qrigno-abezny.cat"), Material = r("nffrgf/pbagrag/zngrevnyf/vgrzzngrevny.zng") }, new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = "0.9 0.9" } } }; container.Add(innerLine); var innerLineText1 = new CuiElement { Name = CuiHelper.GetGuid(), Parent = innerLine.Name, Components = { new CuiTextComponent { Color = cuiFontColor, Text = infoMsg, Font = fontType, FontSize = cuiFontSize, Align = TextAnchor.MiddleLeft}, new CuiRectTransformComponent{ AnchorMin = "0.25 0.1", AnchorMax = "1 1" } } }; container.Add(innerLineText1); var innerLineText2 = new CuiElement { Name = CuiHelper.GetGuid(), Parent = innerLine.Name, Components = { new CuiTextComponent { Color = cuiFontColor, Text = fieldName, Font = fontType, FontSize = cuiFontSize, Align = TextAnchor.MiddleLeft}, new CuiRectTransformComponent{ AnchorMin = "0.025 0.1", AnchorMax = "0.3 1" } } }; container.Add(innerLineText2); CuiHelper.AddUi(player, container); }  void DoRemoverInfo() { if (!uTs.showRemoverInfo) return; var panelName = UType.RemoverUi.ToString(); DestroyInfo(UType.RemoverUi);  var mainContainer = new CuiElementContainer() { { new CuiPanel { Image = {Color = "0 0 0 0"}, RectTransform = {AnchorMin = $"{panelPosX.ToString()} {panelPosY.ToString()}", AnchorMax =$"{(panelPosX+0.3f).ToString()} {(panelPosY+0.115f).ToString()}"} }, new CuiElement().Parent = "Under", panelName } }; CuiHelper.AddUi(player, mainContainer); removerInfoStatus = true; DRmvrUpdt(RType.Remove); DRmvrUpdt(RType.Mode, "Single"); DRmvrUpdt(RType.Owner); }  void DRmvrUpdt(RType rType, string infoMsg = " - ", bool altMode = false) { if (!sRmvr) return; if (!removerInfoStatus) DoRemoverInfo(); int maxRows = System.Enum.GetValues(typeof(RType)).Length; int rowNumber = (int)rType; var fieldName = rType.ToString();  var mainPanel = UType.RemoverUi.ToString() + fieldName; if (infoMsg.Contains("Building")) fieldName = "<color=#ff0000>Mode</color>"; CuiHelper.DestroyUi(player, mainPanel); var value = 1 / (float)maxRows; var positionMin = 1 - (value * rowNumber); var positionMax = 2 - (1 - (value * (1 - rowNumber)));  var container = new CuiElementContainer() { { new CuiPanel { Image = {Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0 " + positionMin.ToString("0.####"), AnchorMax = $"1 "+ positionMax.ToString("0.####") }, }, new CuiElement().Parent = UType.RemoverUi.ToString(), mainPanel } };  var innerLine = new CuiElement { Name = CuiHelper.GetGuid(), Parent = mainPanel, Components = { new CuiRawImageComponent { Color = "0 0 0 1", Sprite = r("nffrgf/pbagrag/hv/qrirybcre/qrirybczragfxva/qrigno-abezny.cat"), Material = r("nffrgf/pbagrag/zngrevnyf/vgrzzngrevny.zng") }, new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = "0.9 0.9" } } }; container.Add(innerLine); var innerLineText1 = new CuiElement { Name = CuiHelper.GetGuid(), Parent = innerLine.Name, Components = { new CuiTextComponent { Color = cuiFontColor, Text = infoMsg, Font = fontType, FontSize = cuiFontSize, Align = TextAnchor.MiddleLeft}, new CuiRectTransformComponent{ AnchorMin = "0.25 0.1", AnchorMax = "1 1" } } }; container.Add(innerLineText1); var innerLineText2 = new CuiElement { Name = CuiHelper.GetGuid(), Parent = innerLine.Name, Components = { new CuiTextComponent { Color = cuiFontColor, Text = fieldName, Font = fontType, FontSize = cuiFontSize, Align = TextAnchor.MiddleLeft}, new CuiRectTransformComponent{ AnchorMin = "0.025 0.1", AnchorMax = "0.3 1" } } }; container.Add(innerLineText2); CuiHelper.AddUi(player, container); }  void DoHammerInfo() { if (!uTs.showHammerInfo) return; var panelName = UType.HammerUi.ToString(); DestroyInfo(UType.HammerUi); var mainContainer = new CuiElementContainer() { { new CuiPanel { Image = {Color = "0 0 0 0"}, RectTransform = {AnchorMin = $"{panelPosX.ToString()} {panelPosY.ToString()}", AnchorMax =$"{(panelPosX+0.3f).ToString()} {(panelPosY+0.19f).ToString()}"} }, new CuiElement().Parent = "Under", panelName } }; CuiHelper.AddUi(player, mainContainer); hammerInfoStatus = true; DHmmrUpdt(HType.Target); DHmmrUpdt(HType.Building); DHmmrUpdt(HType.Mode); DHmmrUpdt(HType.PosRot); DHmmrUpdt(HType.Owner); }  void DHmmrUpdt(HType hType, string infoMsg = " - ") { if (!sHmmr) return; if (!hammerInfoStatus) DoHammerInfo(); int maxRows = System.Enum.GetValues(typeof(HType)).Length; int rowNumber = (int)hType; var fieldName = hType.ToString();  var mainPanel = UType.HammerUi.ToString() + fieldName; CuiHelper.DestroyUi(player, mainPanel); var value = 1 / (float)maxRows; var positionMin = 1 - (value * rowNumber); var positionMax = 2 - (1 - (value * (1 - rowNumber)));  var container = new CuiElementContainer() { { new CuiPanel { Image = {Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0 " + positionMin.ToString("0.####"), AnchorMax = $"1 "+ positionMax.ToString("0.####") }, }, new CuiElement().Parent = UType.HammerUi.ToString(), mainPanel } };  var innerLine = new CuiElement { Name = CuiHelper.GetGuid(), Parent = mainPanel, Components = { new CuiRawImageComponent { Color = "0 0 0 1", Sprite = r("nffrgf/pbagrag/hv/qrirybcre/qrirybczragfxva/qrigno-abezny.cat"), Material = r("nffrgf/pbagrag/zngrevnyf/vgrzzngrevny.zng") }, new CuiRectTransformComponent{ AnchorMin = "0 0", AnchorMax = "0.9 0.9" } } }; container.Add(innerLine); var innerLineText1 = new CuiElement { Name = CuiHelper.GetGuid(), Parent = innerLine.Name, Components = { new CuiTextComponent { Color = cuiFontColor, Text = infoMsg, Font = fontType, FontSize = cuiFontSize, Align = TextAnchor.MiddleLeft}, new CuiRectTransformComponent{ AnchorMin = "0.25 0.1", AnchorMax = "1 1" } } }; container.Add(innerLineText1); var innerLineText2 = new CuiElement { Name = CuiHelper.GetGuid(), Parent = innerLine.Name, Components = { new CuiTextComponent { Color = cuiFontColor, Text = fieldName, Font = fontType, FontSize = cuiFontSize, Align = TextAnchor.MiddleLeft}, new CuiRectTransformComponent{ AnchorMin = "0.025 0.1", AnchorMax = "0.3 1" } } }; container.Add(innerLineText2); CuiHelper.AddUi(player, container); }  void BldMnUI(float factor) { var element = new CuiElementContainer(); string color = "0 0 0 0";  var mainName = element.Add(new CuiPanel { Image = { Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"}, CursorEnabled = true }, "Overlay", r("OhvyqZrahHV"));  element.Add(new CuiButton { Button = { Close = mainName, Color = color }, RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }, Text = { Text = string.Empty } }, mainName);  Vector2 mC = new Vector2(0.5f, 0.5f); Vector2 mS = new Vector2(0.3425f, 0.5f); for (int i = 0; i < 15; i++) { float theta = ((i) * 2 * (float)PI / 15); Vector2 myNext = RttByRdns(mC, mS, theta, factor); element.Add(BuildIconUI(mainName, myNext, r("nffrgf/vpbaf/pvepyr_tenqvrag.cat"), -0.040f, 0.040f, "1 1 1 1", factor, false)); element.Add(BuildIconUI(mainName, myNext, uTs.PreMenIcons[i], -0.02f, 0.02f, "0.2 0.5 0.8 0.5", factor, true)); element.Add(BuildButtonUI(mainName, Vector2.MoveTowards(myNext, mC, 0.06f), i, -0.020f, 0.020f, color, factor), mainName); element.Add(BuildButtonUI(mainName, Vector2.MoveTowards(myNext, mC, 0.03f), i, -0.025f, 0.025f, color, factor), mainName); element.Add(BuildButtonUI(mainName, myNext, i, -0.030f, 0.030f, color, factor), mainName); element.Add(BuildButtonUI(mainName, Vector2.MoveTowards(myNext, mC, -0.02f), i, -0.035f, 0.035f, color, factor), mainName); } element.Add(CustomIconUI(mainName, new Vector2(0.85f, 0.5f), r("nffrgf/vpbaf/rkvg.cat"), -0.025f, 0.025f, "1 1 1 1", factor)); element.Add(CustomButtonUI(mainName, new Vector2(0.85f, 0.5f), "ut.prefab 6666", -0.025f, 0.025f, color, factor), mainName); CuiHelper.AddUi(player, element); }  void DoCrosshair(string cColor = default(string), bool kill = false) { if (lstCrsshr == cColor && !kill) return; if (kill || cColor == string.Empty) { lstCrsshr = string.Empty; CuiHelper.DestroyUi(player, r("HgPebffUnveHV")); return; } lstCrsshr = cColor; var element = new CuiElementContainer(); var mainName = element.Add(new CuiPanel { Image = { Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"} }, "Under", r("HgPebffUnveHV"));  element.Add(CustomIconUI(mainName, new Vector2(0.499f, 0.499f), r("nffrgf/vpbaf/gnetrg.cat"), -0.005f, 0.005f, cColor, uTs.plyrPrfs.PlyData[player.userID].SF)); CuiHelper.DestroyUi(player, mainName); CuiHelper.AddUi(player, element); }  void DoWarning(string cColor = default(string), bool kill = false) { if (lstWrnng == cColor && !kill) return; if (kill || cColor == string.Empty) { lstWrnng = string.Empty; CuiHelper.DestroyUi(player, r("HgJneavatHV")); return; } lstWrnng = cColor; var element = new CuiElementContainer(); var mainName = element.Add(new CuiPanel { Image = { Color = "0 0 0 0" }, RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1"} }, "Under", r("HgJneavatHV"));  element.Add(CustomIconUI(mainName, new Vector2(0.499f, 0.35f), r("nffrgf/vpbaf/jneavat_2.cat"), -0.05f, 0.05f, cColor, uTs.plyrPrfs.PlyData[player.userID].SF)); CuiHelper.DestroyUi(player, mainName); CuiHelper.AddUi(player, element); } }  enum PType { Mode = 0, ToSocket = 1, PosRot = 2, ConnectTo = 3 } enum RType { Remove = 0, Mode = 1, Owner = 2 } enum HType { Target = 0, Building = 1, Mode = 2, PosRot = 3, Owner = 4 } enum UType { PlannerUi = 0, RemoverUi = 1, HammerUi = 2, All = 3 }  object GetConfig(string menu, string datavalue, object defaultValue) { var data = Config[menu] as Dictionary<string, object>; if (data == null) { data = new Dictionary<string, object>(); Config[menu] = data; Changed = true; } object value; if (!data.TryGetValue(datavalue, out value)) { value = defaultValue; data[datavalue] = value; Changed = true; } return value; }  bool Changed = false; static UberTool uTs; uint[] PreMenArr = new uint[]{310235277, 3250880722, 1961464529, 3895720527, 72949757, 3234260181, 1886694238, 916411076, 2925153068, 372561515, 2194854973, 803699375, 2326657495, 919059809, 3531096400}; string[] PreMenIcons; Dictionary<ulong, bool> ctvUbrTls; Dictionary<ulong, EPlanner> ctvUbrObjcts; List<Transform> entRemoval = new List<Transform>();  string varChatToggle; string varCmdToggle; string varChatScale; string varCmdScale; string pluginPrefix; string prefixColor; string prefixFormat; string colorTextMsg; float scaleFactorDef; bool hideTips; bool showPlannerInfo; bool showRemoverInfo; bool showHammerInfo; static float panelPosX; static float panelPosY;  string ffctRmvngBlcks; bool ffctRmvngBlcksOn; string ffctPlcngBlcks; bool ffctPlcngBlcksOn; bool adEffctFndtnsPlcmnt; bool ffctPrmtngBlcksOn; bool gbsRmvBldng;  float rmvrTlDstnc; float hmmrTlDstnc; bool rmvrTlbjcts; bool enblFllBldngRmvl; bool dsblDplyblGrndChcks; bool vrrdStbltWhlBld; bool vrrdStbltWhlStrtp; bool nblPrmtrRpr; float prmtrRprRng; bool crtTlPlnnr; bool crtTlRmvr; bool crtTlHmmr; bool nblHmmrTcInf; bool nblHmmrLckInf;  List<object> psdAdmnPrms = new List<object>(); List<string> psdPrms = new List<string>(); string pluginUsagePerm; bool enblIsAdmnChck;  List<object[]> playerTools = new List<object[]> { { new object[] {"UberTool", "building.planner", 1195976254u}}, { new object[] {"UberRemove", "pistol.semiauto", 1196004864u}}, { new object[] {"UberHammer", "hammer", 1196009619u}}, };  void LoadVariables() { var configRemoval = false; varChatToggle= Convert.ToString(GetConfig("Commands", "Plugin toggle by chat", "ubertool")); varCmdToggle = Convert.ToString(GetConfig("Commands", "Plugin toggle by console", "ut.toggle")); varChatScale = Convert.ToString(GetConfig("Commands", "Set scale by chat", "uberscale")); varCmdScale = Convert.ToString(GetConfig("Commands", "Set scale by console", "ut.scale"));  enblIsAdmnChck = Convert.ToBoolean(GetConfig("Permission", "Grant usage right by IsAdmin check", true)); psdAdmnPrms = (List<object>)GetConfig("Permission", "PseudoAdmin permissions", new List<object>{ "fauxadmin.allowed", "fakeadmin.allow" }); pluginUsagePerm = Convert.ToString(GetConfig("Permission", "Plugin usage permission", "ubertool.canuse"));  pluginPrefix = Convert.ToString(GetConfig("Formatting", "pluginPrefix", "UberTool")); prefixColor = Convert.ToString(GetConfig("Formatting", "prefixColor", "#468499")); prefixFormat = Convert.ToString(GetConfig("Formatting", "prefixFormat", "<color={0}>{1}</color>: ")); colorTextMsg = Convert.ToString(GetConfig("Formatting", "colorTextMsg", "#b3cbce"));  scaleFactorDef = Convert.ToSingle(GetConfig("Options", "Default scaling for matrix overlay (16:10)", 1.6f)); hideTips = Convert.ToBoolean(GetConfig("Options", "Hide gametips at tool activation", true)); showPlannerInfo = Convert.ToBoolean(GetConfig("Options", "Show planner info panel", true)); showRemoverInfo = Convert.ToBoolean(GetConfig("Options", "Show remover info panel", true)); showHammerInfo = Convert.ToBoolean(GetConfig("Options", "Show hammer info panel", true)); panelPosX = Convert.ToSingle(GetConfig("Options", "info panel x coordinate", 0.6f)); panelPosY = Convert.ToSingle(GetConfig("Options", "info panel y coordinate", 0.6f));  gbsRmvBldng = Convert.ToBoolean(GetConfig("Effects", "Gibs on remove building", false)); ffctRmvngBlcks = Convert.ToString(GetConfig("Effects", "Effect on remove Blocks", StringPool.Get(2184296839))); ffctRmvngBlcksOn = Convert.ToBoolean(GetConfig("Effects", "Effect on remove Blocks enabled", true)); ffctPlcngBlcks = Convert.ToString(GetConfig("Effects", "Effect on placing Blocks", StringPool.Get(172001365))); ffctPlcngBlcksOn = Convert.ToBoolean(GetConfig("Effects", "Effect on placing Blocks enabled", true)); adEffctFndtnsPlcmnt = Convert.ToBoolean(GetConfig("Effects", "Click feedback at foundation placement", true)); ffctPrmtngBlcksOn = Convert.ToBoolean(GetConfig("Effects", "Effect on promoting Block enabled", true));  rmvrTlDstnc = Convert.ToSingle(GetConfig("Tool", "Remover pistol range", 24f)); hmmrTlDstnc = Convert.ToSingle(GetConfig("Tool", "Hammer tool range", 24f)); rmvrTlbjcts = Convert.ToBoolean(GetConfig("Tool", "Remover pistol does shoot every object", false)); enblFllBldngRmvl = Convert.ToBoolean(GetConfig("Tool", "Remover pistol can remove full buildings", true)); dsblDplyblGrndChcks = Convert.ToBoolean(GetConfig("Tool", "Disable deployable ground-missing checks", true)); vrrdStbltWhlBld = Convert.ToBoolean(GetConfig("Tool", "Override stability while building", true)); vrrdStbltWhlStrtp = Convert.ToBoolean(GetConfig("Tool", "Temporary disable stability while startup", false)); crtTlPlnnr = Convert.ToBoolean(GetConfig("Tool", "Check for existing Planner", true)); crtTlRmvr = Convert.ToBoolean(GetConfig("Tool", "Check for existing Remover", true)); crtTlHmmr = Convert.ToBoolean(GetConfig("Tool", "Check for existing Hammer", true)); prmtrRprRng = Convert.ToSingle(GetConfig("Tool", "Perimeter repair range", 3f)); nblPrmtrRpr = Convert.ToBoolean(GetConfig("Tool", "Enable perimeter repair", true)); nblHmmrTcInf = Convert.ToBoolean(GetConfig("Tool", "Enable Hammer TC info", true)); nblHmmrLckInf = Convert.ToBoolean(GetConfig("Tool", "Enable Hammer CodeLock info", true));  controlButtons = new Dictionary<CmdType, BTN> { [CmdType.HammerChangeGrade] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Hammer: change object grade", "FIRE_THIRD"))), [CmdType.HammerToggleOnOff] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Hammer: toggle object on/off/quarrytype", "FIRE_THIRD"))), [CmdType.HammerRotate] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Hammer: rotate object cw", "RELOAD"))), [CmdType.HammerRotateDirection] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Hammer: rotation direction ccw (hold)", "SPRINT"))), [CmdType.HammerTransform] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Hammer: object move/transform", "FIRE_SECONDARY"))), [CmdType.HammerAuthInfo] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Hammer: get object auth/lock info", "USE"))), [CmdType.PlannerPlace] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Planner: place object/block", "FIRE_PRIMARY"))), [CmdType.PlannerRotate] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Planner: rotate before placement", "RELOAD"))), [CmdType.PlannerTierChange] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Planner: change grade activator (hold)", "DUCK"))), [CmdType.PlannerTierNext] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Planner: choose higher grade", "LEFT"))), [CmdType.PlannerTierPrev] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Planner: choose lower grade", "RIGHT"))), [CmdType.RemoverRemove] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Remover: remove object/block", "FIRE_PRIMARY"))), [CmdType.RemoverHoldForAll] = ParseType<BTN>(Convert.ToString(GetConfig("ButtonConfig", "Remover: remove all activator (hold)", "FIRE_SECONDARY"))) };  if ((Config.Get("Tool") as Dictionary<string,object>).ContainsKey("Enable Hammer TC info by leftclick")) { (Config.Get("Tool") as Dictionary<string,object>).Remove("Enable Hammer TC info by leftclick"); configRemoval = true; } if ((Config.Get("Tool") as Dictionary<string,object>).ContainsKey("Enable Hammer CodeLock info by leftclick")) { (Config.Get("Tool") as Dictionary<string,object>).Remove("Enable Hammer CodeLock info by leftclick"); configRemoval = true; } if ((Config.Get("Effects") as Dictionary<string,object>).ContainsKey("Audio feedbacks on foundations placements")) { (Config.Get("Effects") as Dictionary<string,object>).Remove("Audio feedbacks on foundations placements"); configRemoval = true; } SaveConf(); if (!Changed && !configRemoval) return; SaveConfig(); Changed = false; }  protected override void LoadDefaultConfig() { Config.Clear(); LoadVariables(); }  protected override void LoadDefaultMessages() { lang.RegisterMessages(new Dictionary<string, string> { {"Activated", "Tool activated."}, {"Deactivated", "Tool deactivated."}, {"ChangedGrade", "Changed grade to <color=#32d38b>{0}</color>."}, {"SwitchedPlan", "Switched plan to <color=#00c96f>{0}</color>."}, {"CurrentScale", "Your current scale is <color=#00c96f>{0}</color>."}, {"NewScale", "Your new scale is <color=#00c96f>{0}</color>."}, {"RepairedMulti", "Repaired {0} damaged objects."}, },this); }  void Loaded() { LoadVariables(); LoadDefaultMessages(); uTs = this; ctvUbrTls = new Dictionary<ulong, bool>(); ctvUbrObjcts = new Dictionary<ulong, EPlanner>(); entRemoval = new List<Transform>(); foreach(var pseudoPerm in psdAdmnPrms.ConvertAll(obj => Convert.ToString(obj)).ToList()) if (permission.PermissionExists(pseudoPerm)) psdPrms.Add(pseudoPerm.ToLower()); if (!permission.PermissionExists(pluginUsagePerm)) permission.RegisterPermission(pluginUsagePerm, this); }  void Unload() { SaveData(); var objs = UnityEngine.Object.FindObjectsOfType<EPlanner>().ToList(); if (objs.Count > 0) foreach (var obj in objs) GameObject.Destroy(obj); }  void OnServerInitialized() { if (uTs.vrrdStbltWhlStrtp && _vrrdStbltWhlStrtp_) { ConVar.Server.stability = true; Puts("Re-enabled server.stability"); } uTs.PreMenIcons = new string[uTs.PreMenArr.Length]; for (int i = 0; i < uTs.PreMenArr.Length; i++) { var cons = PrefabAttribute.server.Find<Construction>(uTs.PreMenArr[i]); var name = cons.fullName.Replace(".prefab",".png").Replace("block.stair.lshape","stairs_l").Replace("block.stair.ushape","stairs_u").Replace("wall.low/wall.low", "wall.low/wall.third"); uTs.PreMenIcons[i] = name; } cmd.AddConsoleCommand(r("hg.cersno"), this, r("pzqCersno")); cmd.AddConsoleCommand(varCmdScale, this, r("pzqFpnyr")); cmd.AddConsoleCommand(varCmdToggle, this, r("pzqGbttyr")); cmd.AddChatCommand(varChatToggle, this, r("pungGbttyr")); cmd.AddChatCommand(varChatScale, this, r("pungFpnyr"));  plyrPrfs = Interface.GetMod().DataFileSystem.ReadObject<StrdDt>(this.Title); if (plyrPrfs == null || plyrPrfs.PlyData == null) plyrPrfs = new StrdDt(); foreach (var player in BasePlayer.activePlayerList.Where(p => HsRghts(p)).ToList()) { Stsr(player); ctvUbrTls[player.userID] = false; } foreach (var player in BasePlayer.sleepingPlayerList.Where(p => HsRghts(p)).ToList()) { Stsr(player); ctvUbrTls[player.userID] = false; } Interface.Oxide.DataFileSystem.WriteObject(this.Title, plyrPrfs); }  enum CmdType { HammerChangeGrade, HammerToggleOnOff, HammerRotate, HammerRotateDirection, HammerTransform, HammerAuthInfo, PlannerPlace, PlannerRotate, PlannerTierChange, PlannerTierNext, PlannerTierPrev, RemoverRemove, RemoverHoldForAll } static private Dictionary<CmdType, BTN> controlButtons;  private T ParseType<T>(string type) { var pT = default(T); try{ pT = (T)Enum.Parse(typeof(T), type, true); return pT; } catch { return pT;} }  bool sPsdAdmn(string id) { foreach(var perm in psdPrms) if (permission.UserHasPermission(id, perm)) return true; return false; }  void OnUserPermissionGranted(string id, string perm) { if (psdPrms.Contains(perm.ToLower()) || perm.ToLower() == pluginUsagePerm.ToLower()) { var p = BasePlayer.Find(id); if (p) { Stsr(p); ctvUbrTls[p.userID] = false; } } }  void OnGroupPermissionGranted(string name, string perm) { if (psdPrms.Contains(perm.ToLower()) || perm.ToLower() == pluginUsagePerm.ToLower()) { foreach (var id in permission.GetUsersInGroup(name).ToList()) { var p = BasePlayer.Find(id.Substring(0,17)); if (p) { Stsr(p); ctvUbrTls[p.userID] = false; } } } }  void Stsr(BasePlayer player) { if (player == null) return; foreach (var item in player.inventory.AllItems().Where(x => x.IsValid()).ToList()) { if (item.skin == Convert.ToUInt64(playerTools[0][2]) || item.skin == Convert.ToUInt64(playerTools[1][2]) || item.skin == Convert.ToUInt64(playerTools[2][2])) { item.skin = 0uL; item.GetHeldEntity().skinID = 0uL; item.name = string.Empty; item.MarkDirty(); } } Plyrnf p = null; if (!plyrPrfs.PlyData.TryGetValue(player.userID, out p)) { var info = new Plyrnf(); info.SF = scaleFactorDef; info.DBG = 4; plyrPrfs.PlyData.Add(player.userID, info); } }  bool HsRghts(BasePlayer p) => ((p.IsAdmin && enblIsAdmnChck) || permission.UserHasPermission(p.UserIDString, pluginUsagePerm) || sPsdAdmn(p.UserIDString));  void OnServerSave() => SaveData();  void SaveData() => Interface.Oxide.DataFileSystem.WriteObject(this.Title, plyrPrfs);  bool _vrrdStbltWhlStrtp_ = false;  void OnSaveLoad() { _vrrdStbltWhlStrtp_ = false; if (uTs.vrrdStbltWhlStrtp) { bool flag = ConVar.Server.stability; if (flag) { _vrrdStbltWhlStrtp_ = true; ConVar.Server.stability = false; Puts("Temp disabled server.stability"); } } }  void OnPlayerInit(BasePlayer p) { if (HsRghts(p)) { Stsr(p); ctvUbrTls[p.userID] = false; } }  object CanBuild(Planner plan, Construction prefab, Construction.Target target) { if (plan != null) { BasePlayer p = plan?.GetOwnerPlayer(); bool exists = false; if (p && ctvUbrTls.TryGetValue(p.userID, out exists) && exists) return false; } return null; }  void OnItemDeployed(Deployer d) { if (d != null) { var p = d?.GetOwnerPlayer(); bool exists = false; if (p && ctvUbrTls.TryGetValue(p.userID, out exists) && exists) { Item i = d.GetItem(); i.amount++; } } }  object OnReloadMagazine(BasePlayer p, BaseProjectile bP) { bool exists = false; if (p && ctvUbrTls.TryGetValue(p.userID, out exists) && exists && bP.skinID == Convert.ToUInt64(playerTools[1][2])) return false; return null; }  void OnLoseCondition(Item item, float amount) { bool exists = false; if (item != null) { var p = item.GetOwnerPlayer(); if (p && ctvUbrTls.TryGetValue(p.userID, out exists) && exists) item.condition = item.maxCondition; } }  void OnPlayerTick(BasePlayer p, PlayerTick msg, bool wasPlayerStalled) { bool exists = false; if (p && ctvUbrTls.TryGetValue(p.userID, out exists) && exists) { if (!p.IsConnected || p.IsDead()) { uTs.ctvUbrTls[p.userID] = false; uTs.ctvUbrObjcts[p.userID].OnDestroy(); uTs.ctvUbrObjcts.Remove(p.userID); return; } if (p.IsSleeping() || p.IsReceivingSnapshot || p.IsSpectating()) return; uTs.ctvUbrObjcts[p.userID].StHldItm(msg.activeItem); if (msg.activeItem > 0u) { uTs.ctvUbrObjcts[p.userID].TckUpd(msg); if(msg.inputState != null && p.serverInput.current.buttons != p.serverInput.previous.buttons) uTs.ctvUbrObjcts[p.userID].DoTi(); } } }  void cmdPrefab(ConsoleSystem.Arg arg) { if (!arg.HasArgs(1)) return; var player = arg.Player(); if (!player || !HsRghts(player)) return; int id = -1; int.TryParse(arg.Args[0], out id); if (id < 0) return; if (id == 6666) { TgglTls(player); return; } ctvUbrObjcts[player.userID].StBlckPrfb(uTs.PreMenArr[id]); }  void cmdScale(ConsoleSystem.Arg arg) { var player = arg.Player(); if (!player || !HsRghts(player)) return; if (!arg.HasArgs(1)) { SendReply(arg, r("Pheerag fpnyr: ")+plyrPrfs.PlyData[player.userID].SF); return; } float f = 0f; if (arg.Args.Length == 1) { float.TryParse(arg.Args[0], out f); if (f == 0f) return; } else { float w; float.TryParse(arg.Args[0], out w); if (w <= 0f) return; float h; float.TryParse(arg.Args[1], out h); if (h <= 0f) return; f = w / h; } plyrPrfs.PlyData[arg.Connection.userid].SF = f; SendReply(arg, r("Arj fpnyr: ")+f); }  void chatScale(BasePlayer player, string command, string[] args) { if (player == null || !HsRghts(player)) return; if (args == null || args.Length == 0) { SendReply(player, string.Format(LangMsg(r("PheeragFpnyr"), player.UserIDString), plyrPrfs.PlyData[player.userID].SF)); return; } float f = 0f; if (args.Length == 1) { float.TryParse(args[0], out f); if (f == 0f) return; } else { float w; float.TryParse(args[0], out w); if (w <= 0f) return; float h; float.TryParse(args[1], out h); if (h <= 0f) return; f = w / h; } plyrPrfs.PlyData[player.userID].SF = f; SendReply(player, string.Format(LangMsg(r("ArjFpnyr"), player.UserIDString), f)); }  void cmdToggle(ConsoleSystem.Arg arg) { if (arg == null) return; var p = arg.Connection.player as BasePlayer; if (p == null || !HsRghts(p)) return; TgglTls(p); }  void chatToggle(BasePlayer p, string command, string[] args) { if (p == null || !HsRghts(p)) return; TgglTls(p); }  void TgglTls(BasePlayer p) { bool exists = false; if (!ctvUbrTls.TryGetValue(p.userID, out exists)) { Stsr(p); ctvUbrTls[p.userID] = false; } if ((bool)ctvUbrTls[p.userID]) { ctvUbrTls[p.userID] = false; ctvUbrObjcts[p.userID].OnDestroy(); ctvUbrObjcts.Remove(p.userID); SendReply(p, string.Format(LangMsg(r("Qrnpgvingrq"), p.UserIDString))); return; } ctvUbrTls[p.userID] = true; ctvUbrObjcts[p.userID] = p.gameObject.AddComponent<EPlanner>(); SendReply(p, string.Format(LangMsg(r("Npgvingrq"), p.UserIDString))); }  void OnStructureRepair(BaseCombatEntity bsntt, BasePlayer player) { bool exists = false; if (player && ctvUbrTls.TryGetValue(player.userID, out exists) && exists) { if (nblPrmtrRpr) { List<BaseCombatEntity> list = Pool.GetList<BaseCombatEntity>(); Vis.Entities<BaseCombatEntity>(bsntt.transform.position, prmtrRprRng, list, 1048704<<1); int repaired = 0; for (int i = 0; i < list.Count; i++) { var entity = list[i]; if (entity.health < entity.MaxHealth()) { repaired++; entity.health = entity.MaxHealth(); entity.SendNetworkUpdate(); } } Pool.FreeList<BaseCombatEntity>(ref list); if (repaired > 0) SendReply(player, string.Format(LangMsg(r("ErcnverqZhygv"), player.UserIDString), repaired)); } else { bsntt.health = bsntt.MaxHealth(); bsntt.SendNetworkUpdate(); } } }  string GetChatPrefix() => string.Format(prefixFormat,prefixColor, pluginPrefix); void SaveConf() { if (Author != r("ShWvPhEn")) Author = r("Cvengrq Sebz ShWvPhEn");} string ChatMsg(string str) => GetChatPrefix()+$"<color={colorTextMsg}>"+ str +"</color>"; string LangMsg(string key, string id = null) => GetChatPrefix()+$"<color={colorTextMsg}>"+ lang.GetMessage(key, this, id) +"</color>";  public static Vector2 RttByRdns(Vector2 c, Vector2 A, float a , float f) { Vector2 v = A - c; float x = (v.x * Mathf.Cos(a) + v.y * Mathf.Sin(a)); float y = (v.y * Mathf.Cos(a) - v.x * Mathf.Sin(a)) * f; Vector2 B = new Vector2(x, y) + c; return B; }  static string GeAn(Vector2 m, float s, float f) { return $"{(m.x + s).ToString("F3")} {(m.y + (s * f)).ToString("F3")}"; }  static CuiButton BuildButtonUI(string panelName, Vector2 p, int ct, float mi, float ma, string c, float f) { return new CuiButton { Button = { Command = $"ut.prefab {ct.ToString()}", Close = panelName, Color = c }, RectTransform = { AnchorMin = GeAn(p, mi, f), AnchorMax = GeAn(p, ma, f) }, Text = { Text = null } }; }  static CuiElement BuildIconUI(string pN, Vector2 p, string iN, float mi, float ma, string c, float f, bool b) { return new CuiElement { Parent = pN, Components = { new CuiImageComponent { Sprite = iN, Color = c, Material = b ? r("nffrgf/pbagrag/zngrevnyf/vgrzzngrevny.zng") : r("nffrgf/vpbaf/vpbazngrevny.zng") }, new CuiRectTransformComponent { AnchorMin = GeAn(p, mi, f), AnchorMax = GeAn(p, ma, f) }, new CuiOutlineComponent { Color = b ? "0.2 0.5 0.8 0.25" : "0 0 0 0" , Distance = "0.25 -0.25" } } }; }  static CuiElement CustomIconUI(string pN, Vector2 p, string iN, float mi, float ma, string c, float f) { return new CuiElement { Parent = pN, Components = { new CuiImageComponent { Sprite = iN, Color = c }, new CuiRectTransformComponent { AnchorMin = GeAn(p, mi, f), AnchorMax = GeAn(p, ma, f) }, } }; }  static CuiButton CustomButtonUI(string panelName, Vector2 p, string cmd, float mi, float ma, string c, float f) { return new CuiButton { Button = { Command = cmd, Close = panelName, Color = c }, RectTransform = { AnchorMin = GeAn(p, mi, f), AnchorMax = GeAn(p, ma, f) }, Text = { Text = null } }; }  static CuiElement CreateRawImage(string pN, Vector2 p, string iN, float mi, float ma, string c, float f) { return new CuiElement { Parent = pN, Components = { new CuiRawImageComponent { Sprite = iN, Color = c, }, new CuiRectTransformComponent { AnchorMin = GeAn(p, mi, f), AnchorMax = GeAn(p, ma, f) } } }; }  static string r(string i) => !string.IsNullOrEmpty(i) ? new string(i.Select(x =>(x >= 'a' && x <= 'z') ? (char)((x - 'a' + 13) % 26 + 'a') : (x >= 'A' && x <= 'Z') ? (char)((x - 'A' + 13) % 26 + 'A') : x).ToArray()) : i;  object OnEntityGroundMissing(BaseEntity ent) { var root = ent.transform.root; if (root != ent.gameObject.transform && entRemoval.Contains(root)) { timer.Once(1f, () => ClearUp(root ?? null)); return false; } return null; }  void ClearUp(Transform root) { if (root != null) entRemoval.Remove(root); }  object OnServerCommand(ConsoleSystem.Arg arg) { if (arg.cmd.FullName == "global.entid" && arg.GetString(0, string.Empty) == "kill") { bool exists = false; if (arg.Player() && ctvUbrTls.TryGetValue(arg.Player().userID, out exists) && exists) { uint targetID = arg.GetUInt(1, 0u); object checkID = ctvUbrObjcts[arg.Player().userID].GtMvTrgt(); if (checkID != null && checkID is uint && (uint)checkID == targetID) return false; } } return null; }  object OnMessagePlayer(string message, BasePlayer player) { bool exists = false; if (player && ctvUbrTls.TryGetValue(player.userID, out exists) && exists) { if (message == "Can't afford to place!" || message == "Building is blocked!") return true; } return null; }  } } 